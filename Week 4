****************************                      WEEK 4 Programming, Data Structures And Algorithms Using Python                       ****************************
Week 4 QUIZ          Week 4 QUIZ          Week 4 QUIZ          Week 4 QUIZ          Week 4 QUIZ          Week 4 QUIZ          Week 4 QUIZ          Week 4 QUIZ


1.	Consider the following Python function.
    def mystery(l):
        if l == []:
            return(l)
        else:
            return(mystery(l[1:])+l[:1])
What does mystery([22,14,19,65,82,55]) return?

Correct Answer is 		
       [55,82,65,19,14,22]

2.	What is the value of pairs after the following assignment?
     pairs = [ (x,y) for x in range(4,1,-1) for y in range(5,1,-1) if (x+y)%3 == 0 ]

Correct Answer is 


3.	Consider the following dictionary.
      wickets = {"Tests":{"Bumrah":[3,5,2,3],"Shami":[4,4,1,0],"Ashwin":[2,1,7,4]},"ODI":{"Bumrah":[2,0],"Shami":[1,2]}}
      Which of the following statements does not generate an error?
          1.	wickets["ODI"]["Ashwin"][0:] = [4,4]
          2.	wickets["ODI"]["Ashwin"].extend([4,4])
          3.	wickets["ODI"]["Ashwin"] = [4,4]
          4.	wickets["ODI"]["Ashwin"] = wickets["ODI"]["Ashwin"] + [4,4]

Correct Answer is 
       wickets["ODI"]["Ashwin"] = [4,4]
       
       
       
       
5.	Assume that hundreds has been initialized as an empty dictionary:
    hundreds = {}
    Which of the following generates an error?
        1.	hundreds["Tendulkar, international"] = 100
        2.	hundreds["Tendulkar"] = {"international":100}
        3.	hundreds[("Tendulkar","international")] = 100
        4.	hundreds[["Tendulkar","international"]] = 100

Correct Answer is 
        hundreds[["Tendulkar","international"]] = 100
 








Week 4 Programming Assignment       Week 4 Programming Assignment            Week 4 Programming Assignment          Week 4 Programming Assignment




1.	Write a Python function frequency(l) that takes as input a list of integers and returns a pair of the form (minfreqlist,maxfreqlist) where minfreqlist is a list of     numbers with minimum frequency in l, sorted in ascending order maxfreqlist is a list of numbers with maximum frequency in l, sorted in ascending order. 
    Here are some examples of how your function should work.
        >>> frequency([13,12,11,13,14,13,7,11,13,14,12])
        ([7], [13])
        >>> frequency([13,12,11,13,14,13,7,11,13,14,12,14,14])
        ([7], [13, 14])
        >>> frequency([13,12,11,13,14,13,7,11,13,14,12,14,14,7])
        ([7, 11, 12], [13, 14])

2.	An airline has assigned each city that it serves a unique numeric code. It has collected information about all the direct flights it operates, represented as a         list of pairs of the form (i,j), where i is the code of the starting city and j is the code of the destination.
    It now wants to compute all pairs of cities connected by one intermediate hope — city i is connected to city j by one intermediate hop if there are direct flights     of the form (i,k) and (k,j) for some other city k. The airline is only interested in one hop flights between different cities — pairs of the form (i,i) are not         useful.
    Write a Python function onehop(l) that takes as input a list of pairs representing direct flights, as described above, and returns a list of all pairs (i,j), where     i != j, such that i and j are connected by one hop. Note that it may already be the case that there is a direct flight from i to j. So long as there is an             intermediate k with a flight from i to k and from k to j, the list returned by the function should include (i,j). The input list may be in any order. The pairs in     the output list should be in lexicographic (dictionary) order. Each pair should be listed exactly once.
    Here are some examples of how your function should work.
            >>> onehop([(2,3),(1,2)])
            [(1, 3)]
            >>> onehop([(2,3),(1,2),(3,1),(1,3),(3,2),(2,4),(4,1)])
            [(1, 2), (1, 3), (1, 4), (2, 1), (3, 2), (3, 4), (4, 2), (4, 3)]
            >>> onehop([(1,2),(3,4),(5,6)])
            []




Answers:
              def frequency(l):
                  count = {}
                  for n in l:
                      if n in count.keys():
                          count[n] = count[n]+1
                      else:
                          count[n] = 1
                  minlist = findmin(count)
                  maxlist = findmax(count)
                  return((minlist,maxlist))

              def findmin(d):
                  upperbound = 0
                  for n in d.keys():
                      if d[n] > upperbound:
                          upperbound = d[n]
                  minlist = []
                  mincount = upperbound

                  for n in d.keys():
                      if d[n] < mincount:
                          minlist = [n]
                          mincount = d[n]
                      elif d[n] == mincount:
                          minlist.append(n)
                  return(sorted(minlist))


              def findmax(d):
                  maxlist = []
                  maxcount = 0

                  for n in d.keys():
                      if d[n] > maxcount:
                          maxlist = [n]
                          maxcount = d[n]
                      elif d[n] == maxcount:
                          maxlist.append(n)
                  return(sorted(maxlist))

              ###################

              def onehop(l):
                  direct = {}
                  for (i,j) in l:
                      if i in direct.keys():
                          direct[i].append(j)
                      else:
                          direct[i] = [j]

                  hopping = []

                  for src in direct.keys():
                      for dest in direct[src]:
                          if dest in direct.keys():
                              for remote in direct[dest]:
                                  if src != remote:
                                      hopping.append((src,remote))

                  return(remdup(sorted(hopping)))

              def remdup(l):
                  if len(l) < 2:
                      return(l)

                  if l[0] != l[1]:
                      return(l[0:1]+remdup(l[1:]))
                  else:
                      return(remdup(l[1:]))

              ###################

              import ast

              def parse(inp):
                inp = ast.literal_eval(inp)
                return (inp)

              fncall = input()
              lparen = fncall.find("(")
              rparen = fncall.rfind(")")
              fname = fncall[:lparen]
              farg = fncall[lparen+1:rparen]

              if fname == "frequency":
                arg = parse(farg)
                print(frequency(arg))

              if fname == "onehop":
                arg = parse(farg)
                print(onehop(arg))



